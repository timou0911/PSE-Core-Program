/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockAMB, MockAMBInterface } from "../MockAMB";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_xDomainMessageSender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_xDomainMessageChainId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "who",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct MockAMB.Call[]",
        name: "_calls",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "messageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messageSourceChainId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "setMessageSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xDomainMessageChainId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104b63803806104b683398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155610090565b6000806040838503121561006a578182fd5b82516001600160a01b0381168114610080578283fd5b6020939093015192949293505050565b6104178061009f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636e296e451461006757806388230f9b146100855780639e307dff1461009a578063baae8abf146100a2578063bc67f832146100c3578063d67bdd25146100d8575b600080fd5b61006f6100e0565b60405161007c9190610323565b60405180910390f35b61008d6100ef565b60405161007c919061035a565b61008d6100f5565b6100b56100b0366004610259565b6100fb565b60405161007c929190610337565b6100d66100d136600461022b565b6101fa565b005b61006f61021c565b6000546001600160a01b031681565b60015481565b60015490565b6000606060005b838110156101f25784848281811061011657fe5b905060200281019061012891906103c2565b61013690602081019061022b565b6001600160a01b031685858381811061014b57fe5b905060200281019061015d91906103c2565b61016b906020810190610376565b604051610179929190610313565b6000604051808303816000865af19150503d80600081146101b6576040519150601f19603f3d011682016040523d82523d6000602084013e6101bb565b606091505b50909350915081836101e95760405162461bcd60e51b81526004016101e09190610363565b60405180910390fd5b50600101610102565b509250929050565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b60006020828403121561023c578081fd5b81356001600160a01b0381168114610252578182fd5b9392505050565b6000806020838503121561026b578081fd5b823567ffffffffffffffff80821115610282578283fd5b818501915085601f830112610295578283fd5b8135818111156102a3578384fd5b86602080830285010111156102b6578384fd5b60209290920196919550909350505050565b60008151808452815b818110156102ed576020818501810151868301820152016102d1565b818111156102fe5782602083870101525b50601f01601f19169290920160200192915050565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b600083151582526040602083015261035260408301846102c8565b949350505050565b90815260200190565b60006020825261025260208301846102c8565b6000808335601e1984360301811261038c578283fd5b83018035915067ffffffffffffffff8211156103a6578283fd5b6020019150368190038213156103bb57600080fd5b9250929050565b60008235603e198336030181126103d7578182fd5b919091019291505056fea2646970667358221220433721c9a1ee1b1585566e59a6bf521b2de652c87dad55ecb0ff8ad767b7f1cc64736f6c63430007060033";

export class MockAMB__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _xDomainMessageSender: string,
    _xDomainMessageChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAMB> {
    return super.deploy(
      _xDomainMessageSender,
      _xDomainMessageChainId,
      overrides || {}
    ) as Promise<MockAMB>;
  }
  getDeployTransaction(
    _xDomainMessageSender: string,
    _xDomainMessageChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _xDomainMessageSender,
      _xDomainMessageChainId,
      overrides || {}
    );
  }
  attach(address: string): MockAMB {
    return super.attach(address) as MockAMB;
  }
  connect(signer: Signer): MockAMB__factory {
    return super.connect(signer) as MockAMB__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAMBInterface {
    return new utils.Interface(_abi) as MockAMBInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAMB {
    return new Contract(address, _abi, signerOrProvider) as MockAMB;
  }
}
