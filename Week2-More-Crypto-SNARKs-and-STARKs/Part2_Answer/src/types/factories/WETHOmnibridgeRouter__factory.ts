/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WETHOmnibridgeRouter,
  WETHOmnibridgeRouterInterface,
} from "../WETHOmnibridgeRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IOmnibridge",
        name: "_bridge",
        type: "address",
      },
      {
        internalType: "contract IWETH",
        name: "_weth",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract IWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract IOmnibridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "onTokenBridged",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wrapAndRelayTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "wrapAndRelayTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "wrapAndRelayTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610e4c380380610e4c8339818101604052606081101561003357600080fd5b5080516020820151604092830151600080546001600160a01b038084166001600160a01b03199092169190911782556001600160601b0319606086811b821660805285901b1660a052855163095ea7b360e01b81528186166004820152600019602482015295519495939492939085169263095ea7b39260448084019391929182900301818387803b1580156100c857600080fd5b505af11580156100dc573d6000803e3d6000fd5b5050505050505060805160601c60a05160601c610d0f61013d60003980609a528061034d52806103f05280610523528061054752806105c852806106ba528061075d5250806103c1528061058e528061065d528061072e5250610d0f6000f3fe60806040526004361061008a5760003560e01c8063ad5c464811610059578063ad5c4648146101f5578063db7af8541461020a578063e78cea92146102d2578063f2fde38b146102e7578063f52cbf0e1461031a576100c6565b806301a754ff146100cb5780633ace4765146100d357806369ffa08a146101895780638da5cb5b146101c4576100c6565b366100c657336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100c457600080fd5b005b600080fd5b6100c4610340565b6100c4600480360360408110156100e957600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561011457600080fd5b82018360208201111561012657600080fd5b8035906020019184600183028401116401000000008311171561014857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061034b945050505050565b34801561019557600080fd5b506100c4600480360360408110156101ac57600080fd5b506001600160a01b03813581169160200135166104ed565b3480156101d057600080fd5b506101d9610512565b604080516001600160a01b039092168252519081900360200190f35b34801561020157600080fd5b506101d9610521565b34801561021657600080fd5b506100c46004803603606081101561022d57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561025d57600080fd5b82018360208201111561026f57600080fd5b8035906020019184600183028401116401000000008311171561029157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610545945050505050565b3480156102de57600080fd5b506101d961065b565b3480156102f357600080fd5b506100c46004803603602081101561030a57600080fd5b50356001600160a01b031661067f565b6100c46004803603602081101561033057600080fd5b50356001600160a01b03166106b8565b610349336106b8565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103a657600080fd5b505af11580156103ba573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d74054817f00000000000000000000000000000000000000000000000000000000000000008434856040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561048257818101518382015260200161046a565b50505050905090810190601f1680156104af5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461050457600080fd5b61050e82826107ef565b5050565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461058357600080fd5b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b857600080fd5b80516014146105c657600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561062c57600080fd5b505af1158015610640573d6000803e3d6000fd5b5050505061065661065082610829565b83610830565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461069657600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad58bdd17f000000000000000000000000000000000000000000000000000000000000000083346040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b5050505050565b806001600160a01b03811661080357600080fd5b6001600160a01b03831661081f5761081a8261089b565b610656565b61065683836108a6565b6014015190565b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505061050e57808260405161086790610c4b565b6001600160a01b039091168152604051908190036020019082f0905080158015610895573d6000803e3d6000fd5b50505050565b4761050e8282610830565b604080516370a0823160e01b8152306004820152905183916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d602081101561091b57600080fd5b505190506108956001600160a01b0383168483604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261065690849060606109d0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a2c9092919063ffffffff16565b805190915015610656578080602001905160208110156109ef57600080fd5b50516106565760405162461bcd60e51b815260040180806020018281038252602a815260200180610cb0602a913960400191505060405180910390fd5b6060610a3b8484600085610a45565b90505b9392505050565b606082471015610a865760405162461bcd60e51b8152600401808060200182810382526026815260200180610c8a6026913960400191505060405180910390fd5b610a8f85610ba1565b610ae0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610b1f5780518252601f199092019160209182019101610b00565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b81576040519150601f19603f3d011682016040523d82523d6000602084013e610b86565b606091505b5091509150610b96828286610ba7565b979650505050505050565b3b151590565b60608315610bb6575081610a3e565b825115610bc65782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c10578181015183820152602001610bf8565b50505050905090810190601f168015610c3d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b603280610c588339019056fe60806040526040516032380380603283398181016040526020811015602357600080fd5b50516001600160a01b038116fffe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a700c95f49a78cfb65e876a3104badc04f8f9d2faa78b8c24dda7ca9bf41fdb964736f6c63430007050033";

export class WETHOmnibridgeRouter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _bridge: string,
    _weth: string,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WETHOmnibridgeRouter> {
    return super.deploy(
      _bridge,
      _weth,
      _owner,
      overrides || {}
    ) as Promise<WETHOmnibridgeRouter>;
  }
  getDeployTransaction(
    _bridge: string,
    _weth: string,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_bridge, _weth, _owner, overrides || {});
  }
  attach(address: string): WETHOmnibridgeRouter {
    return super.attach(address) as WETHOmnibridgeRouter;
  }
  connect(signer: Signer): WETHOmnibridgeRouter__factory {
    return super.connect(signer) as WETHOmnibridgeRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WETHOmnibridgeRouterInterface {
    return new utils.Interface(_abi) as WETHOmnibridgeRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WETHOmnibridgeRouter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as WETHOmnibridgeRouter;
  }
}
