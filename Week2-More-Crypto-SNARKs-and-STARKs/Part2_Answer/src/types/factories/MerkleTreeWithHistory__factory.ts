/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleTreeWithHistory,
  MerkleTreeWithHistoryInterface,
} from "../MerkleTreeWithHistory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_levels",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600380546001600160401b031916905534801561002057600080fd5b50604051610d58380380610d588339818101604052604081101561004357600080fd5b50805160209091015163ffffffff821661008e5760405162461bcd60e51b8152600401808060200182810382526023815260200180610d356023913960400191505060405180910390fd5b60208263ffffffff16106100e9576040805162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000604482015290519081900360640190fd5b60e082901b6001600160e01b03191660a052606081901b6001600160601b0319166080526001600160a01b03169063ffffffff16610bf661013f600039806103d15250806102fc5280610b395250610bf66000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c2b40ae41161008c578063ec73295911610066578063ec732959146101b5578063ed33639f146101bd578063f178e47c146101e1578063fc7e9c6f146101fe576100cf565b8063c2b40ae414610173578063cd87a3b414610190578063e829558814610198576100cf565b806338bf282e146100d4578063414a37ba146101095780634ecf518b146101115780636d9833e31461013257806390eeb02b14610163578063ba70f7571461016b575b600080fd5b6100f7600480360360408110156100ea57600080fd5b5080359060200135610206565b60408051918252519081900360200190f35b6100f76103ab565b6101196103cf565b6040805163ffffffff9092168252519081900360200190f35b61014f6004803603602081101561014857600080fd5b50356103f3565b604080519115158252519081900360200190f35b610119610465565b6100f7610471565b6100f76004803603602081101561018957600080fd5b503561048c565b61011961049e565b6100f7600480360360208110156101ae57600080fd5b50356104a3565b6100f7610b13565b6101c5610b37565b604080516001600160a01b039092168252519081900360200190f35b6100f7600480360360208110156101f757600080fd5b5035610b5b565b610119610b6d565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001831061027c576040805162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015290519081900360640190fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182106102da5760405162461bcd60e51b8152600401808060200182810382526021815260200180610ba06021913960400191505060405180910390fd5b6102e2610b81565b838152602081018390526040805163014cf2b360e51b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163299e56609184916004909101908190839080838360005b8381101561035557818101518382015260200161033d565b5050505090500191505060206040518083038186803b15801561037757600080fd5b505afa15801561038b573d6000803e3d6000fd5b505050506040513d60208110156103a157600080fd5b5051949350505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008161040257506000610460565b60035463ffffffff16805b63ffffffff811660009081526002602052604090205484141561043557600192505050610460565b63ffffffff8116610444575060645b6000190163ffffffff808216908316141561040d576000925050505b919050565b60035463ffffffff1681565b60035463ffffffff1660009081526002602052604090205490565b60026020526000908152604090205481565b606481565b6000816104d157507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c610460565b816001141561050157507f1a332ca2cd2436bdc6796e6e4244ebf6f7e359868b7252e55342f766e4088082610460565b816002141561053157507f2fb19ac27499bdf9d7d3b387eff42b6d12bffbc6206e81d0ef0b0d6b24520ebd610460565b816003141561056157507f18d0d6e282d4eacbf18efc619a986db763b75095ed122fac7d4a49418daa42e1610460565b816004141561059157507f054dec40f76a0f5aaeff1a85a4a3721b92b4ad244362d30b0ef8ed7033de11d3610460565b81600514156105c157507f1d24c91f8d40f1c2591edec19d392905cf5eb01eada48d71836177ef11aea5b2610460565b81600614156105f157507f0fb63621cfc047eba2159faecfa55b120d7c81c0722633ef94e20e27675e378f610460565b816007141561062157507f277b08f214fe8c5504a79614cdec5abd7b6adc9133fe926398684c82fd798b44610460565b816008141561065157507f2633613437c1fd97f7c798e2ea30d52cfddee56d74f856a541320ae86ddaf2de610460565b816009141561068057507e768963fa4b993fbfece3619bfaa3ca4afd7e3864f11b09a0849dbf4ad25807610460565b81600a14156106b057507f0e63ff9df484c1a21478bd27111763ef203177ec0a7ef3a3cd43ec909f587bb0610460565b81600b14156106e057507f0e6a4bfb0dd0ac8bf5517eaac48a95ba783dabe9f64494f9c892d3e8431eaab3610460565b81600c141561071057507f0164a46b3ffff8baca00de7a130a63d105f1578076838502b99488505d5b3d35610460565b81600d141561074057507f145a6f1521c02b250cc76eb35cd67c9b0b22473577de3778e4c51903836c8957610460565b81600e141561077057507f29849fc5b55303a660bad33d986fd156d48516ec58a0f0a561a03b704a802254610460565b81600f14156107a057507f26639dd486b374e98ac6da34e8651b3fca58c51f1c2f857dd82045f27fc8dbe6610460565b81601014156107d057507f2aa39214b887ee877e60afdb191390344c68177c30a0b8646649774174de5e33610460565b816011141561080057507f09b397d253e41a521d042ffe01f8c33ae37d4c7da21af68693aafb63d599d708610460565b816012141561083057507f02fbfd397ad901cea38553239aefec016fcb6a19899038503f04814cbb79a511610460565b816013141561086057507f266640a877ec97a91f6c95637f843eeac8718f53f311bac9cba7d958df646f9d610460565b816014141561089057507f29f9a0a07a22ab214d00aaa0190f54509e853f3119009baecb0035347606b0a9610460565b81601514156108c057507f0a1fda67bffa0ab3a755f23fdcf922720820b6a96616a5ca34643cd0b935e3d6610460565b81601614156108f057507f19507199eb76b5ec5abe538a01471d03efb6c6984739c77ec61ada2ba2afb389610460565b816017141561092057507f26bd93d26b751484942282e27acfb6d193537327a831df6927e19cdfc73c3e64610460565b816018141561095057507f2eb88a9c6b00a4bc6ea253268090fe1d255f6fe02d2eb745517723aae44d7386610460565b816019141561098057507f13e50d0bda78be97792df40273cbb16f0dc65c0697d81a82d07d0f6eee80a164610460565b81601a14156109b057507f2ea95776929000133246ff8d9fdcba179d0b262b9e910558309bac1c1ec03d7a610460565b81601b14156109e057507f1a640d6ef66e356c795396c0957b06a99891afe0c493f4d0bdfc0450764bae60610460565b81601c1415610a1057507f2b17979f2c2048dd9e4ee5f482cced21435ea8cc54c32f80562e39a5016b0496610460565b81601d1415610a4057507f29ba6a30de50542e261abfc7ee0c68911002d3acd4dd4c02ad59aa96805b20bb610460565b81601e1415610a7057507f103fcf1c8a98ebe50285f6e669077a579308311fd44bb6895d5da7ba7fd3564e610460565b81601f1415610aa057507f166bdd01780976e655f5278260c638dcf10fe7c136f37c9152cbcaabef901f4d610460565b8160201415610ad057507f2712c601a9b8b2abd396a619327095d3f1ea86a6c07d6df416a3973a1a4b3ce5610460565b6040805162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015290519081900360640190fd5b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020526000908152604090205481565b600354640100000000900463ffffffff1681565b6040518060400160405280600290602082028036833750919291505056fe5f72696768742073686f756c6420626520696e7369646520746865206669656c64a2646970667358221220d46ff60e2fd385cabc829d6671fffb89d9aed1c156ec18af84482c3d5112bf1664736f6c634300070600335f6c6576656c732073686f756c642062652067726561746572207468616e207a65726f";

export class MerkleTreeWithHistory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _levels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleTreeWithHistory> {
    return super.deploy(
      _levels,
      _hasher,
      overrides || {}
    ) as Promise<MerkleTreeWithHistory>;
  }
  getDeployTransaction(
    _levels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_levels, _hasher, overrides || {});
  }
  attach(address: string): MerkleTreeWithHistory {
    return super.attach(address) as MerkleTreeWithHistory;
  }
  connect(signer: Signer): MerkleTreeWithHistory__factory {
    return super.connect(signer) as MerkleTreeWithHistory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeWithHistoryInterface {
    return new utils.Interface(_abi) as MerkleTreeWithHistoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeWithHistory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MerkleTreeWithHistory;
  }
}
