/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockOmniBridgeInterface extends ethers.utils.Interface {
  functions: {
    "AMB()": FunctionFragment;
    "bridgeContract()": FunctionFragment;
    "execute(tuple[])": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "AMB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [{ who: string; callData: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "AMB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;

  events: {
    "OnTokenTransfer(address,address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnTokenTransfer"): EventFragment;
}

export type OnTokenTransferEvent = TypedEvent<
  [string, string, string, BigNumber, string] & {
    contr: string;
    from: string;
    receiver: string;
    value: BigNumber;
    data: string;
  }
>;

export class MockOmniBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockOmniBridgeInterface;

  functions: {
    AMB(overrides?: CallOverrides): Promise<[string]>;

    bridgeContract(overrides?: CallOverrides): Promise<[string]>;

    execute(
      _calls: { who: string; callData: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onTokenTransfer(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AMB(overrides?: CallOverrides): Promise<string>;

  bridgeContract(overrides?: CallOverrides): Promise<string>;

  execute(
    _calls: { who: string; callData: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onTokenTransfer(
    _from: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AMB(overrides?: CallOverrides): Promise<string>;

    bridgeContract(overrides?: CallOverrides): Promise<string>;

    execute(
      _calls: { who: string; callData: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; result: string }>;

    onTokenTransfer(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OnTokenTransfer(address,address,address,uint256,bytes)"(
      contr?: null,
      from?: null,
      receiver?: null,
      value?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        contr: string;
        from: string;
        receiver: string;
        value: BigNumber;
        data: string;
      }
    >;

    OnTokenTransfer(
      contr?: null,
      from?: null,
      receiver?: null,
      value?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        contr: string;
        from: string;
        receiver: string;
        value: BigNumber;
        data: string;
      }
    >;
  };

  estimateGas: {
    AMB(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeContract(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _calls: { who: string; callData: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onTokenTransfer(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AMB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _calls: { who: string; callData: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
