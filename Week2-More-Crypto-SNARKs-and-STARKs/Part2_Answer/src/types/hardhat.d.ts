/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "UpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableProxy__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "CrossChainGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainGuard__factory>;
    getContractFactory(
      name: "L1Helper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1Helper__factory>;
    getContractFactory(
      name: "CrossChainUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainUpgradeableProxy__factory>;
    getContractFactory(
      name: "Hasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hasher__factory>;
    getContractFactory(
      name: "IAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAMB__factory>;
    getContractFactory(
      name: "IERC20Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Receiver__factory>;
    getContractFactory(
      name: "IERC6777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6777__factory>;
    getContractFactory(
      name: "IOmniBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniBridge__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IHasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasher__factory>;
    getContractFactory(
      name: "MerkleTreeWithHistory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTreeWithHistory__factory>;
    getContractFactory(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicToken__factory>;
    getContractFactory(
      name: "BurnableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BurnableToken__factory>;
    getContractFactory(
      name: "DetailedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DetailedERC20__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "ERC677BridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677BridgeToken__factory>;
    getContractFactory(
      name: "IBurnableMintableERC677Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBurnableMintableERC677Token__factory>;
    getContractFactory(
      name: "MintableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableToken__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "PermittableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermittableToken__factory>;
    getContractFactory(
      name: "Sacrifice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sacrifice__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "MerkleTreeWithHistoryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTreeWithHistoryMock__factory>;
    getContractFactory(
      name: "MockAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAMB__factory>;
    getContractFactory(
      name: "MockOmniBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOmniBridge__factory>;
    getContractFactory(
      name: "TornadoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TornadoPool__factory>;
    getContractFactory(
      name: "Verifier16",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier16__factory>;
    getContractFactory(
      name: "Verifier2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier2__factory>;
    getContractFactory(
      name: "WETHOmnibridgeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHOmnibridgeRouter__factory>;
    getContractFactory(
      name: "IOmnibridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmnibridge__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "OwnableModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableModule__factory>;
    getContractFactory(
      name: "Sacrifice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sacrifice__factory>;

    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "UpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableProxy>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "CrossChainGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainGuard>;
    getContractAt(
      name: "L1Helper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1Helper>;
    getContractAt(
      name: "CrossChainUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainUpgradeableProxy>;
    getContractAt(
      name: "Hasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Hasher>;
    getContractAt(
      name: "IAMB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAMB>;
    getContractAt(
      name: "IERC20Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Receiver>;
    getContractAt(
      name: "IERC6777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6777>;
    getContractAt(
      name: "IOmniBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniBridge>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IHasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasher>;
    getContractAt(
      name: "MerkleTreeWithHistory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTreeWithHistory>;
    getContractAt(
      name: "BasicToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicToken>;
    getContractAt(
      name: "BurnableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BurnableToken>;
    getContractAt(
      name: "DetailedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DetailedERC20>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Basic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Basic>;
    getContractAt(
      name: "ERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "ERC677BridgeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677BridgeToken>;
    getContractAt(
      name: "IBurnableMintableERC677Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBurnableMintableERC677Token>;
    getContractAt(
      name: "MintableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableToken>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "PermittableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermittableToken>;
    getContractAt(
      name: "Sacrifice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Sacrifice>;
    getContractAt(
      name: "StandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "MerkleTreeWithHistoryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTreeWithHistoryMock>;
    getContractAt(
      name: "MockAMB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAMB>;
    getContractAt(
      name: "MockOmniBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOmniBridge>;
    getContractAt(
      name: "TornadoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TornadoPool>;
    getContractAt(
      name: "Verifier16",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier16>;
    getContractAt(
      name: "Verifier2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier2>;
    getContractAt(
      name: "WETHOmnibridgeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETHOmnibridgeRouter>;
    getContractAt(
      name: "IOmnibridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmnibridge>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "OwnableModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableModule>;
    getContractAt(
      name: "Sacrifice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Sacrifice>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
